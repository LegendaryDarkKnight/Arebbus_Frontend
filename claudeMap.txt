import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';
import 'package:geolocator/geolocator.dart';

// Mock data model for backend markers
class LocationMarker {
  final String id;
  final String name;
  final String description;
  final LatLng position;
  final String category;
  final IconData icon;
  final Color color;

  LocationMarker({
    required this.id,
    required this.name,
    required this.description,
    required this.position,
    required this.category,
    required this.icon,
    required this.color,
  });
}

class MapScreen extends StatefulWidget {
  const MapScreen({super.key});

  @override
  State<MapScreen> createState() => _MapScreenState();
}

class _MapScreenState extends State<MapScreen> {
  final MapController _mapController = MapController();
  LatLng? _currentLocation;
  bool _isLoading = true;
  bool _locationPermissionGranted = false;

  // Mock data - replace with backend data
  List<LocationMarker> _backendMarkers = [];

  @override
  void initState() {
    super.initState();
    _initializeMap();
  }

  Future<void> _initializeMap() async {
    await _getCurrentLocation();
    _loadMockMarkers();
  }

  Future<void> _getCurrentLocation() async {
    try {
      // Check if location services are enabled
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        _showLocationDialog('Location services are disabled');
        return;
      }

      // Check location permissions
      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) {
          _showLocationDialog('Location permissions are denied');
          return;
        }
      }

      if (permission == LocationPermission.deniedForever) {
        _showLocationDialog('Location permissions are permanently denied');
        return;
      }

      // Get current position
      Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
      );

      setState(() {
        _currentLocation = LatLng(position.latitude, position.longitude);
        _locationPermissionGranted = true;
        _isLoading = false;
      });

      // Center map on current location
      if (_currentLocation != null) {
        _mapController.move(_currentLocation!, 15.0);
      }
    } catch (e) {
      setState(() {
        _isLoading = false;
      });
      _showLocationDialog('Error getting location: ${e.toString()}');
    }
  }

  void _loadMockMarkers() {
    // Mock data - replace with your backend API call
    setState(() {
      _backendMarkers = [
        LocationMarker(
          id: '1',
          name: 'Restaurant A',
          description: 'Great food and ambiance',
          position: LatLng(
            (_currentLocation?.latitude ?? 51.5074) + 0.002,
            (_currentLocation?.longitude ?? -0.1278) + 0.001,
          ),
          category: 'Restaurant',
          icon: Icons.restaurant,
          color: Colors.orange,
        ),
        LocationMarker(
          id: '2',
          name: 'Gas Station',
          description: 'Fuel and convenience store',
          position: LatLng(
            (_currentLocation?.latitude ?? 51.5074) - 0.001,
            (_currentLocation?.longitude ?? -0.1278) + 0.003,
          ),
          category: 'Gas Station',
          icon: Icons.local_gas_station,
          color: Colors.blue,
        ),
        LocationMarker(
          id: '3',
          name: 'Hospital',
          description: 'Emergency medical services',
          position: LatLng(
            (_currentLocation?.latitude ?? 51.5074) + 0.001,
            (_currentLocation?.longitude ?? -0.1278) - 0.002,
          ),
          category: 'Hospital',
          icon: Icons.local_hospital,
          color: Colors.red,
        ),
        LocationMarker(
          id: '4',
          name: 'Shopping Mall',
          description: 'Shopping and entertainment',
          position: LatLng(
            (_currentLocation?.latitude ?? 51.5074) - 0.002,
            (_currentLocation?.longitude ?? -0.1278) - 0.001,
          ),
          category: 'Shopping',
          icon: Icons.shopping_cart,
          color: Colors.green,
        ),
        LocationMarker(
          id: '5',
          name: 'Park',
          description: 'Beautiful green space',
          position: LatLng(
            (_currentLocation?.latitude ?? 51.5074) + 0.003,
            (_currentLocation?.longitude ?? -0.1278) + 0.002,
          ),
          category: 'Park',
          icon: Icons.park,
          color: Colors.green[700]!,
        ),
      ];
    });
  }

  void _showLocationDialog(String message) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Location Access'),
        content: Text(message),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('OK'),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              _getCurrentLocation();
            },
            child: const Text('Retry'),
          ),
        ],
      ),
    );
  }

  void _showMarkerDetails(LocationMarker marker) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(marker.icon, color: marker.color),
            const SizedBox(width: 8),
            Expanded(child: Text(marker.name)),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Category: ${marker.category}'),
            const SizedBox(height: 8),
            Text(marker.description),
            const SizedBox(height: 8),
            Text('Location: ${marker.position.latitude.toStringAsFixed(4)}, ${marker.position.longitude.toStringAsFixed(4)}'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Close'),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              _mapController.move(marker.position, 18.0);
            },
            child: const Text('Go to Location'),
          ),
        ],
      ),
    );
  }

  void _centerOnCurrentLocation() {
    if (_currentLocation != null) {
      _mapController.move(_currentLocation!, 15.0);
    } else {
      _getCurrentLocation();
    }
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            CircularProgressIndicator(),
            SizedBox(height: 16),
            Text('Getting your location...'),
          ],
        ),
      );
    }

    return Column(
      children: [
        // Top control bar
        Container(
          padding: const EdgeInsets.all(8),
          color: Colors.grey[100],
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                'Nearby Places: ${_backendMarkers.length}',
                style: const TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              Row(
                children: [
                  IconButton(
                    icon: const Icon(Icons.refresh),
                    onPressed: _loadMockMarkers,
                    tooltip: 'Refresh markers',
                  ),
                  IconButton(
                    icon: const Icon(Icons.my_location),
                    onPressed: _centerOnCurrentLocation,
                    tooltip: 'Center on my location',
                  ),
                ],
              ),
            ],
          ),
        ),
        // Map
        Expanded(
          child: Stack(
            children: [
              FlutterMap(
                mapController: _mapController,
                options: MapOptions(
                  initialCenter: _currentLocation ?? LatLng(51.5074, -0.1278),
                  initialZoom: 15.0,
                  minZoom: 5.0,
                  maxZoom: 18.0,
                  // Google Maps-like experience
                  interactionOptions: const InteractionOptions(
                    flags: InteractiveFlag.all,
                  ),
                ),
                children: [
                  // Tile layer with Google-like tiles
                  TileLayer(
                    urlTemplate: 'https://tile.openstreetmap.org/{z}/{x}/{y}.png',
                    userAgentPackageName: 'com.example.app',
                  ),
                  // Current location marker
                  if (_currentLocation != null)
                    MarkerLayer(
                      markers: [
                        Marker(
                          point: _currentLocation!,
                          width: 40,
                          height: 40,
                          child: Container(
                            decoration: BoxDecoration(
                              color: Colors.blue,
                              shape: BoxShape.circle,
                              border: Border.all(color: Colors.white, width: 3),
                              boxShadow: [
                                BoxShadow(
                                  color: Colors.black.withValues(alpha: 0.3),
                                  blurRadius: 6,
                                  offset: const Offset(0, 2),
                                ),
                              ],
                            ),
                            child: const Icon(
                              Icons.person,
                              color: Colors.white,
                              size: 20,
                            ),
                          ),
                        ),
                      ],
                    ),
                  // Backend markers
                  MarkerLayer(
                    markers: _backendMarkers
                        .map(
                          (marker) => Marker(
                        point: marker.position,
                        width: 40,
                        height: 40,
                        child: GestureDetector(
                          onTap: () => _showMarkerDetails(marker),
                          child: Container(
                            decoration: BoxDecoration(
                              color: marker.color,
                              shape: BoxShape.circle,
                              border: Border.all(color: Colors.white, width: 2),
                              boxShadow: [
                                BoxShadow(
                                  color: Colors.black.withValues(alpha: 0.3),
                                  blurRadius: 4,
                                  offset: const Offset(0, 2),
                                ),
                              ],
                            ),
                            child: Icon(
                              marker.icon,
                              color: Colors.white,
                              size: 20,
                            ),
                          ),
                        ),
                      ),
                    )
                        .toList(),
                  ),
                ],
              ),
              // Floating action button for current location
              Positioned(
                bottom: 16,
                right: 16,
                child: FloatingActionButton(
                  onPressed: _centerOnCurrentLocation,
                  backgroundColor: Colors.white,
                  foregroundColor: Colors.blue,
                  child: const Icon(Icons.my_location),
                ),
              ),
            ],
          ),
        ),
        // Bottom info panel
        Container(
          padding: const EdgeInsets.all(16),
          color: Colors.grey[100],
          child: Text(
            _locationPermissionGranted
                ? 'Tap on markers to view details • Blue marker is your location'
                : 'Location access required to show nearby places',
            style: const TextStyle(fontSize: 14),
            textAlign: TextAlign.center,
          ),
        ),
      ],
    );
  }
}